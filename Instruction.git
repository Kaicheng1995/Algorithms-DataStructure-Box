INSTRUCTION URL: https://sp19.datastructur.es/materials/guides/using-git.html

____________
[1] git init: 
Set up a repository to track the history of the current directory.

[2] git add:
Add/Select a file that we want to track its history.
NOTICE: Every time when having revised something, we should use always "add" before commit. 

[3] git status:
Show the tracked files and untracked files currently.

[4] git commit -m "added file0"
Stores a snapshot of all added files into the repository. 
The -m command lets us add a message to the commit, so we can remember what was most important about this commit.
NOTICE: If we changed content of a file, we should always use "git add" before "git commit".

[5] git log:
Show the previous commitments.(Includes ID\AUTHOR\DATE..)

[6] git show "ID":
See the inside info of a commitment.

[7] git checkout:
Rearranges files back to how they looked in a given panoramic photo. Does not affect the panormiac photos in your box in any way.
NOTCIE: PLEASE specify a file (or a directory) when using checkout, or you should use "git checkout master" to fix.

[8] git reset HEAD [file]:
Unstage a file that you haven’t yet committed. This will take the file’s status back to modified, leaving changes intact. Don’t worry about this command undoing any work. This command is the equivalent of deleting one of the temporary images that you’re going to combine into a panorama.
Why might we need to use this command? Let’s say you accidentally started tracking a file that you didn’t want to track. (an embarrassing video of yourself, for instance.) Or you were made some changes to a file that you thought you would commit but no longer want to commit quite yet.

[9] $ git add [forgotten-file]
    $ git commit --amend
Amend latest commit (changing commit message or add forgotten files). Please note that this new amended commit will replace the previous commit.

[10] $ git checkout -- [file]
Revert a file to its state at the time of the most recent commit. This next command is useful if you would like to actually undo your work. Let’s say that you have modified a certain file since committing previously, but you would like your file back to how it was before your modifications.
Note: This command is potentially quite dangerous because any changes you made to the file since your last commit will be removed. Use this with caution!


[11] ls -la: 
show all directories, including repositories.


[12] Some terms:
untracked files: These files have either never been tracked or were removed from tracking. Git is not maintaining history for these files.
tracked files: These files have been added to the Git repository and can be in various stages of modification: unmodified, modified, or staged.
        An unmodified file is one that has had no new changes since the last version of the files was added to the Git repo.
        A modified file is one that is different from the last one Git has saved.
        A staged file is one that a user has designated as part of a future commit (usually through use of the git add command). We can think of these as files which have lights shining upon them.


[13] Remote Repository



